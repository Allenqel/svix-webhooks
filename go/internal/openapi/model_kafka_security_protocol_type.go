/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// KafkaSecurityProtocolType the model 'KafkaSecurityProtocolType'
type KafkaSecurityProtocolType string

// List of KafkaSecurityProtocolType
const (
	KAFKASECURITYPROTOCOLTYPE_PLAINTEXT KafkaSecurityProtocolType = "plaintext"
	KAFKASECURITYPROTOCOLTYPE_SSL KafkaSecurityProtocolType = "ssl"
	KAFKASECURITYPROTOCOLTYPE_SASL_SSL KafkaSecurityProtocolType = "sasl-ssl"
)

var allowedKafkaSecurityProtocolTypeEnumValues = []KafkaSecurityProtocolType{
	"plaintext",
	"ssl",
	"sasl-ssl",
}

func (v *KafkaSecurityProtocolType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KafkaSecurityProtocolType(value)
	for _, existing := range allowedKafkaSecurityProtocolTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid KafkaSecurityProtocolType", value)
}

// NewKafkaSecurityProtocolTypeFromValue returns a pointer to a valid KafkaSecurityProtocolType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKafkaSecurityProtocolTypeFromValue(v string) (*KafkaSecurityProtocolType, error) {
	ev := KafkaSecurityProtocolType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for KafkaSecurityProtocolType: valid values are %v", v, allowedKafkaSecurityProtocolTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KafkaSecurityProtocolType) IsValid() bool {
	for _, existing := range allowedKafkaSecurityProtocolTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KafkaSecurityProtocolType value
func (v KafkaSecurityProtocolType) Ptr() *KafkaSecurityProtocolType {
	return &v
}

type NullableKafkaSecurityProtocolType struct {
	value *KafkaSecurityProtocolType
	isSet bool
}

func (v NullableKafkaSecurityProtocolType) Get() *KafkaSecurityProtocolType {
	return v.value
}

func (v *NullableKafkaSecurityProtocolType) Set(val *KafkaSecurityProtocolType) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaSecurityProtocolType) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaSecurityProtocolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaSecurityProtocolType(val *KafkaSecurityProtocolType) *NullableKafkaSecurityProtocolType {
	return &NullableKafkaSecurityProtocolType{value: val, isSet: true}
}

func (v NullableKafkaSecurityProtocolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaSecurityProtocolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

