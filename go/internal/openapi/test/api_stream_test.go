/*
Svix API

Testing StreamAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_StreamAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StreamAPIService V1StreamCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StreamAPI.V1StreamCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService V1StreamDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string

		httpRes, err := apiClient.StreamAPI.V1StreamDelete(context.Background(), streamId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService V1StreamGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAPI.V1StreamGet(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService V1StreamList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StreamAPI.V1StreamList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService V1StreamPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAPI.V1StreamPatch(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService V1StreamUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAPI.V1StreamUpdate(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
