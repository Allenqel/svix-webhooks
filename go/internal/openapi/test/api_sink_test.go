/*
Svix API

Testing SinkAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/openapi"
)

func Test_openapi_SinkAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SinkAPIService V1StreamCreateEvents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.SinkAPI.V1StreamCreateEvents(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamEventsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.SinkAPI.V1StreamEventsGet(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamSinkCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.SinkAPI.V1StreamSinkCreate(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamSinkDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string
		var sinkId string

		httpRes, err := apiClient.SinkAPI.V1StreamSinkDelete(context.Background(), streamId, sinkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamSinkGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string
		var sinkId string

		resp, httpRes, err := apiClient.SinkAPI.V1StreamSinkGet(context.Background(), streamId, sinkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamSinkList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.SinkAPI.V1StreamSinkList(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamSinkPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string
		var sinkId string

		resp, httpRes, err := apiClient.SinkAPI.V1StreamSinkPatch(context.Background(), streamId, sinkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamSinkTransformationGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string
		var sinkId string

		resp, httpRes, err := apiClient.SinkAPI.V1StreamSinkTransformationGet(context.Background(), streamId, sinkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamSinkTransformationPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string
		var sinkId string

		httpRes, err := apiClient.SinkAPI.V1StreamSinkTransformationPartialUpdate(context.Background(), streamId, sinkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SinkAPIService V1StreamSinkUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamId string
		var sinkId string

		resp, httpRes, err := apiClient.SinkAPI.V1StreamSinkUpdate(context.Background(), streamId, sinkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
