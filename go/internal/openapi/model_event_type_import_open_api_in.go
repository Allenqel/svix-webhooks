/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventTypeImportOpenApiIn struct for EventTypeImportOpenApiIn
type EventTypeImportOpenApiIn struct {
	Spec map[string]map[string]interface{} `json:"spec"`
}

// NewEventTypeImportOpenApiIn instantiates a new EventTypeImportOpenApiIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTypeImportOpenApiIn(spec map[string]map[string]interface{}) *EventTypeImportOpenApiIn {
	this := EventTypeImportOpenApiIn{}
	this.Spec = spec
	return &this
}

// NewEventTypeImportOpenApiInWithDefaults instantiates a new EventTypeImportOpenApiIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeImportOpenApiInWithDefaults() *EventTypeImportOpenApiIn {
	this := EventTypeImportOpenApiIn{}
	return &this
}

// GetSpec returns the Spec field value
func (o *EventTypeImportOpenApiIn) GetSpec() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *EventTypeImportOpenApiIn) GetSpecOk() (*map[string]map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *EventTypeImportOpenApiIn) SetSpec(v map[string]map[string]interface{}) {
	o.Spec = v
}

func (o EventTypeImportOpenApiIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableEventTypeImportOpenApiIn struct {
	value *EventTypeImportOpenApiIn
	isSet bool
}

func (v NullableEventTypeImportOpenApiIn) Get() *EventTypeImportOpenApiIn {
	return v.value
}

func (v *NullableEventTypeImportOpenApiIn) Set(val *EventTypeImportOpenApiIn) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeImportOpenApiIn) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeImportOpenApiIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeImportOpenApiIn(val *EventTypeImportOpenApiIn) *NullableEventTypeImportOpenApiIn {
	return &NullableEventTypeImportOpenApiIn{value: val, isSet: true}
}

func (v NullableEventTypeImportOpenApiIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeImportOpenApiIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


