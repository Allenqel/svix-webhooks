/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SinkInOneOf3 struct for SinkInOneOf3
type SinkInOneOf3 struct {
	Type string `json:"type"`
	Url string `json:"url"`
}

// NewSinkInOneOf3 instantiates a new SinkInOneOf3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinkInOneOf3(type_ string, url string) *SinkInOneOf3 {
	this := SinkInOneOf3{}
	this.Type = type_
	this.Url = url
	return &this
}

// NewSinkInOneOf3WithDefaults instantiates a new SinkInOneOf3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinkInOneOf3WithDefaults() *SinkInOneOf3 {
	this := SinkInOneOf3{}
	return &this
}

// GetType returns the Type field value
func (o *SinkInOneOf3) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf3) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SinkInOneOf3) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *SinkInOneOf3) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SinkInOneOf3) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SinkInOneOf3) SetUrl(v string) {
	o.Url = v
}

func (o SinkInOneOf3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableSinkInOneOf3 struct {
	value *SinkInOneOf3
	isSet bool
}

func (v NullableSinkInOneOf3) Get() *SinkInOneOf3 {
	return v.value
}

func (v *NullableSinkInOneOf3) Set(val *SinkInOneOf3) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkInOneOf3) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkInOneOf3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkInOneOf3(val *SinkInOneOf3) *NullableSinkInOneOf3 {
	return &NullableSinkInOneOf3{value: val, isSet: true}
}

func (v NullableSinkInOneOf3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkInOneOf3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


